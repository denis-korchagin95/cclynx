@test("It should generate IR code on while loop statement with expression <")
@given("file")
int main() {
    int i;
    i = 0;
    while (i < 10) {
        i = i + 1;
    }
    return i * 7 + 7;
}
@whenRun("./bin/ir-generator-tester")
@expectOutput("stdout")
0000 OP_FUNC "main"
0001 OP_CONST 0, t1
0002 OP_STORE i, t1
0003 OP_LABEL ".L1"
0004 OP_LOAD i, t2
0005 OP_CONST 10, t3
0006 OP_BRANCH_LESS_THAN t2, t3, ".L2"
0007 OP_LOAD i, t4
0008 OP_CONST 1, t5
0009 OP_ADD t4, t5, t6
0010 OP_STORE i, t6
0011 OP_JUMP ".L1"
0012 OP_LABEL ".L2"
0013 OP_LOAD i, t7
0014 OP_CONST 7, t8
0015 OP_MUL t7, t8, t9
0016 OP_CONST 7, t10
0017 OP_ADD t9, t10, t11
0018 OP_RETURN t11
0019 OP_FUNC_END

@endtest

@test("It should generate IR code on while loop statement with expression >")
@given("file")
int main() {
    int i;
    i = 20;
    while (i > 10) {
        i = i - 1;
    }
    return i * 7 + 7;
}
@whenRun("./bin/ir-generator-tester")
@expectOutput("stdout")
0000 OP_FUNC "main"
0001 OP_CONST 20, t1
0002 OP_STORE i, t1
0003 OP_LABEL ".L1"
0004 OP_LOAD i, t2
0005 OP_CONST 10, t3
0006 OP_BRANCH_GREATER_THAN t2, t3, ".L2"
0007 OP_LOAD i, t4
0008 OP_CONST 1, t5
0009 OP_SUB t4, t5, t6
0010 OP_STORE i, t6
0011 OP_JUMP ".L1"
0012 OP_LABEL ".L2"
0013 OP_LOAD i, t7
0014 OP_CONST 7, t8
0015 OP_MUL t7, t8, t9
0016 OP_CONST 7, t10
0017 OP_ADD t9, t10, t11
0018 OP_RETURN t11
0019 OP_FUNC_END

@endtest
