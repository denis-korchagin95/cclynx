@test("It should parse an integer constant")
@given("file")
int main() {
    777;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: 'main' {type: 'int'}
|
+-> CompoundStatement
    |
    +-> ExpressionStatement
        |
        +-> IntegerConstant: '777' {type: 'int'}

@endtest

@test("It should parse a float constant")
@given("file")
int main() {
    12.512;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: 'main' {type: 'int'}
|
+-> CompoundStatement
    |
    +-> ExpressionStatement
        |
        +-> FloatConstant: '12.512000' {type: 'float'}

@endtest

@test("It should parse a multiplicative expression (*) (primitive case)")
@given("file")
int main() {
    7 * 8;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: 'main' {type: 'int'}
|
+-> CompoundStatement
    |
    +-> ExpressionStatement
        |
        +-> MultiplicativeExpression: '*' {type: 'int'}
            |
            +-> IntegerConstant: '7' {type: 'int'}
            |
            +-> IntegerConstant: '8' {type: 'int'}

@endtest

@test("It should parse a multiplicative expression (*) (nested level 2 primitive case)")
@given("file")
int main() {
    7 * 6 * 8;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: 'main' {type: 'int'}
|
+-> CompoundStatement
    |
    +-> ExpressionStatement
        |
        +-> MultiplicativeExpression: '*' {type: 'int'}
            |
            +-> MultiplicativeExpression: '*' {type: 'int'}
            |   |
            |   +-> IntegerConstant: '7' {type: 'int'}
            |   |
            |   +-> IntegerConstant: '6' {type: 'int'}
            |
            +-> IntegerConstant: '8' {type: 'int'}

@endtest

@test("It should parse a multiplicative expression (*) (nested level 4 primitive case)")
@given("file")
int main() {
    7 * 6 * 8 * 10 * 15;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: 'main' {type: 'int'}
|
+-> CompoundStatement
    |
    +-> ExpressionStatement
        |
        +-> MultiplicativeExpression: '*' {type: 'int'}
            |
            +-> MultiplicativeExpression: '*' {type: 'int'}
            |   |
            |   +-> MultiplicativeExpression: '*' {type: 'int'}
            |   |   |
            |   |   +-> MultiplicativeExpression: '*' {type: 'int'}
            |   |   |   |
            |   |   |   +-> IntegerConstant: '7' {type: 'int'}
            |   |   |   |
            |   |   |   +-> IntegerConstant: '6' {type: 'int'}
            |   |   |
            |   |   +-> IntegerConstant: '8' {type: 'int'}
            |   |
            |   +-> IntegerConstant: '10' {type: 'int'}
            |
            +-> IntegerConstant: '15' {type: 'int'}

@endtest

@test("It should parse a multiplicative expression (combination *, /) (with nested level primitive case)")
@given("file")
int main() {
    15 / 3 * 101;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: 'main' {type: 'int'}
|
+-> CompoundStatement
    |
    +-> ExpressionStatement
        |
        +-> MultiplicativeExpression: '*' {type: 'int'}
            |
            +-> MultiplicativeExpression: '/' {type: 'int'}
            |   |
            |   +-> IntegerConstant: '15' {type: 'int'}
            |   |
            |   +-> IntegerConstant: '3' {type: 'int'}
            |
            +-> IntegerConstant: '101' {type: 'int'}

@endtest

@test("It should parse an additive expression (+) (primitive case)")
@given("file")
int main() {
    7 + 8;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: 'main' {type: 'int'}
|
+-> CompoundStatement
    |
    +-> ExpressionStatement
        |
        +-> AdditiveExpression: '+' {type: 'int'}
            |
            +-> IntegerConstant: '7' {type: 'int'}
            |
            +-> IntegerConstant: '8' {type: 'int'}

@endtest

@test("It should parse an additive expression (+) (nested level 2 primitive case)")
@given("file")
int main() {
    7 + 6 + 8;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: 'main' {type: 'int'}
|
+-> CompoundStatement
    |
    +-> ExpressionStatement
        |
        +-> AdditiveExpression: '+' {type: 'int'}
            |
            +-> AdditiveExpression: '+' {type: 'int'}
            |   |
            |   +-> IntegerConstant: '7' {type: 'int'}
            |   |
            |   +-> IntegerConstant: '6' {type: 'int'}
            |
            +-> IntegerConstant: '8' {type: 'int'}

@endtest

@test("It should parse an additive expression (+) (nested level 4 primitive case)")
@given("file")
int main() {
    7 + 6 + 8 + 10 + 15;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: 'main' {type: 'int'}
|
+-> CompoundStatement
    |
    +-> ExpressionStatement
        |
        +-> AdditiveExpression: '+' {type: 'int'}
            |
            +-> AdditiveExpression: '+' {type: 'int'}
            |   |
            |   +-> AdditiveExpression: '+' {type: 'int'}
            |   |   |
            |   |   +-> AdditiveExpression: '+' {type: 'int'}
            |   |   |   |
            |   |   |   +-> IntegerConstant: '7' {type: 'int'}
            |   |   |   |
            |   |   |   +-> IntegerConstant: '6' {type: 'int'}
            |   |   |
            |   |   +-> IntegerConstant: '8' {type: 'int'}
            |   |
            |   +-> IntegerConstant: '10' {type: 'int'}
            |
            +-> IntegerConstant: '15' {type: 'int'}

@endtest

@test("It should parse an additive expression (combination +, -) (with nested level primitive case)")
@given("file")
int main() {
    15 + 3 - 101;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: 'main' {type: 'int'}
|
+-> CompoundStatement
    |
    +-> ExpressionStatement
        |
        +-> AdditiveExpression: '-' {type: 'int'}
            |
            +-> AdditiveExpression: '+' {type: 'int'}
            |   |
            |   +-> IntegerConstant: '15' {type: 'int'}
            |   |
            |   +-> IntegerConstant: '3' {type: 'int'}
            |
            +-> IntegerConstant: '101' {type: 'int'}

@endtest

@test("It should parse an expression with combination (additive, multiplicative)")
@given("file")
int main() {
    1 + 7 * 6 - 4;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: 'main' {type: 'int'}
|
+-> CompoundStatement
    |
    +-> ExpressionStatement
        |
        +-> AdditiveExpression: '-' {type: 'int'}
            |
            +-> AdditiveExpression: '+' {type: 'int'}
            |   |
            |   +-> IntegerConstant: '1' {type: 'int'}
            |   |
            |   +-> MultiplicativeExpression: '*' {type: 'int'}
            |       |
            |       +-> IntegerConstant: '7' {type: 'int'}
            |       |
            |       +-> IntegerConstant: '6' {type: 'int'}
            |
            +-> IntegerConstant: '4' {type: 'int'}

@endtest

@test("It should parse a relational expression (<) (primitive case)")
@given("file")
int main() {
    7 < 8;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: 'main' {type: 'int'}
|
+-> CompoundStatement
    |
    +-> ExpressionStatement
        |
        +-> RelationalExpression: '<' {type: 'int'}
            |
            +-> IntegerConstant: '7' {type: 'int'}
            |
            +-> IntegerConstant: '8' {type: 'int'}

@endtest

@test("It should parse a relational expression (<) (nested level 2 primitive case)")
@given("file")
int main() {
    7 < 6 < 8;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: 'main' {type: 'int'}
|
+-> CompoundStatement
    |
    +-> ExpressionStatement
        |
        +-> RelationalExpression: '<' {type: 'int'}
            |
            +-> RelationalExpression: '<' {type: 'int'}
            |   |
            |   +-> IntegerConstant: '7' {type: 'int'}
            |   |
            |   +-> IntegerConstant: '6' {type: 'int'}
            |
            +-> IntegerConstant: '8' {type: 'int'}

@endtest

@test("It should parse a relational expression (<) (nested level 4 primitive case)")
@given("file")
int main() {
    7 < 6 < 8 < 10 < 15;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: 'main' {type: 'int'}
|
+-> CompoundStatement
    |
    +-> ExpressionStatement
        |
        +-> RelationalExpression: '<' {type: 'int'}
            |
            +-> RelationalExpression: '<' {type: 'int'}
            |   |
            |   +-> RelationalExpression: '<' {type: 'int'}
            |   |   |
            |   |   +-> RelationalExpression: '<' {type: 'int'}
            |   |   |   |
            |   |   |   +-> IntegerConstant: '7' {type: 'int'}
            |   |   |   |
            |   |   |   +-> IntegerConstant: '6' {type: 'int'}
            |   |   |
            |   |   +-> IntegerConstant: '8' {type: 'int'}
            |   |
            |   +-> IntegerConstant: '10' {type: 'int'}
            |
            +-> IntegerConstant: '15' {type: 'int'}

@endtest

@test("It should parse a relational expression (combination <, >) (with nested level primitive case)")
@given("file")
int main() {
    15 < 3 > 101;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: 'main' {type: 'int'}
|
+-> CompoundStatement
    |
    +-> ExpressionStatement
        |
        +-> RelationalExpression: '>' {type: 'int'}
            |
            +-> RelationalExpression: '<' {type: 'int'}
            |   |
            |   +-> IntegerConstant: '15' {type: 'int'}
            |   |
            |   +-> IntegerConstant: '3' {type: 'int'}
            |
            +-> IntegerConstant: '101' {type: 'int'}

@endtest

@test("It should parse a equality expression (==) (primitive case)")
@given("file")
int main() {
    7 == 8;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: 'main' {type: 'int'}
|
+-> CompoundStatement
    |
    +-> ExpressionStatement
        |
        +-> EqualityExpression: '==' {type: 'int'}
            |
            +-> IntegerConstant: '7' {type: 'int'}
            |
            +-> IntegerConstant: '8' {type: 'int'}

@endtest

@test("It should parse a equality expression (==) (nested level 2 primitive case)")
@given("file")
int main() {
    7 == 6 == 8;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: 'main' {type: 'int'}
|
+-> CompoundStatement
    |
    +-> ExpressionStatement
        |
        +-> EqualityExpression: '==' {type: 'int'}
            |
            +-> EqualityExpression: '==' {type: 'int'}
            |   |
            |   +-> IntegerConstant: '7' {type: 'int'}
            |   |
            |   +-> IntegerConstant: '6' {type: 'int'}
            |
            +-> IntegerConstant: '8' {type: 'int'}

@endtest

@test("It should parse a equality expression (==) (nested level 4 primitive case)")
@given("file")
int main() {
    7 == 6 == 8 == 10 == 15;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: 'main' {type: 'int'}
|
+-> CompoundStatement
    |
    +-> ExpressionStatement
        |
        +-> EqualityExpression: '==' {type: 'int'}
            |
            +-> EqualityExpression: '==' {type: 'int'}
            |   |
            |   +-> EqualityExpression: '==' {type: 'int'}
            |   |   |
            |   |   +-> EqualityExpression: '==' {type: 'int'}
            |   |   |   |
            |   |   |   +-> IntegerConstant: '7' {type: 'int'}
            |   |   |   |
            |   |   |   +-> IntegerConstant: '6' {type: 'int'}
            |   |   |
            |   |   +-> IntegerConstant: '8' {type: 'int'}
            |   |
            |   +-> IntegerConstant: '10' {type: 'int'}
            |
            +-> IntegerConstant: '15' {type: 'int'}

@endtest

@test("It should parse a equality expression (combination ==, !=) (with nested level primitive case)")
@given("file")
int main() {
    15 == 3 != 101;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: 'main' {type: 'int'}
|
+-> CompoundStatement
    |
    +-> ExpressionStatement
        |
        +-> EqualityExpression: '!=' {type: 'int'}
            |
            +-> EqualityExpression: '==' {type: 'int'}
            |   |
            |   +-> IntegerConstant: '15' {type: 'int'}
            |   |
            |   +-> IntegerConstant: '3' {type: 'int'}
            |
            +-> IntegerConstant: '101' {type: 'int'}

@endtest

@test("It should parse an assignment expression (simple version)")
@given("file")
int main() {
    int x;
    x = 3;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: 'main' {type: 'int'}
|
+-> CompoundStatement
    |
    +-> VariableDeclaration: 'x' {type: 'int'}
    |
    +-> ExpressionStatement
        |
        +-> AssignmentExpression: '='
            |
            +-> Variable: 'x' {type: 'int'}
            |
            +-> IntegerConstant: '3' {type: 'int'}

@endtest

@test("It should parse nested expressions")
@given("file")
int main() {
    77 * (1 + 23);
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: 'main' {type: 'int'}
|
+-> CompoundStatement
    |
    +-> ExpressionStatement
        |
        +-> MultiplicativeExpression: '*' {type: 'int'}
            |
            +-> IntegerConstant: '77' {type: 'int'}
            |
            +-> AdditiveExpression: '+' {type: 'int'}
                |
                +-> IntegerConstant: '1' {type: 'int'}
                |
                +-> IntegerConstant: '23' {type: 'int'}

@endtest
