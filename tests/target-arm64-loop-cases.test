@test("It should generate target arm64 code with while loop statement with expression <")
@given("file")
int main() {
    int i;
    i = 0;
    while (i < 10) {
        i = i + 1;
    }
    return i * 7 + 7;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    sub sp, sp, #16
    mov w9, #0
    str w9, [sp, #0]
.L1:
    ldr w9, [sp, #0]
    mov w10, #10
    cmp w9, w10
    b.ge .L2
    ldr w9, [sp, #0]
    mov w10, #1
    add w11, w9, w10
    str w11, [sp, #0]
    b .L1
.L2:
    ldr w9, [sp, #0]
    mov w10, #7
    mul w11, w9, w10
    mov w9, #7
    add w10, w11, w9
    mov w0, w10
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code with while loop statement with expression >")
@given("file")
int main() {
    int i;
    i = 20;
    while (i > 10) {
        i = i - 1;
    }
    return i * 7 + 7;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    sub sp, sp, #16
    mov w9, #20
    str w9, [sp, #0]
.L1:
    ldr w9, [sp, #0]
    mov w10, #10
    cmp w9, w10
    b.le .L2
    ldr w9, [sp, #0]
    mov w10, #1
    sub w11, w9, w10
    str w11, [sp, #0]
    b .L1
.L2:
    ldr w9, [sp, #0]
    mov w10, #7
    mul w11, w9, w10
    mov w9, #7
    add w10, w11, w9
    mov w0, w10
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code with while loop statement with expression ==")
@given("file")
int main() {
    int i;
    i = 0;
    while (i == 0) {
        i = i + 7;
    }
    return i;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    sub sp, sp, #16
    mov w9, #0
    str w9, [sp, #0]
.L1:
    ldr w9, [sp, #0]
    mov w10, #0
    cmp w9, w10
    b.ne .L2
    ldr w9, [sp, #0]
    mov w10, #7
    add w11, w9, w10
    str w11, [sp, #0]
    b .L1
.L2:
    ldr w9, [sp, #0]
    mov w0, w9
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code with while loop statement with expression !=")
@given("file")
int main() {
    int i;
    i = 10;
    while (i != 3) {
        i = i - 1;
    }
    return i;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    sub sp, sp, #16
    mov w9, #10
    str w9, [sp, #0]
.L1:
    ldr w9, [sp, #0]
    mov w10, #3
    cmp w9, w10
    b.eq .L2
    ldr w9, [sp, #0]
    mov w10, #1
    sub w11, w9, w10
    str w11, [sp, #0]
    b .L1
.L2:
    ldr w9, [sp, #0]
    mov w0, w9
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code with while loop statement with constant false condition")
@given("file")
int main() {
    int i;
    i = 1;
    while (0) {
        i = i + 1;
    }
    return i;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    sub sp, sp, #16
    mov w9, #1
    str w9, [sp, #0]
.L1:
    mov w9, #0
    cbz w9, .L2
    ldr w9, [sp, #0]
    mov w10, #1
    add w11, w9, w10
    str w11, [sp, #0]
    b .L1
.L2:
    ldr w9, [sp, #0]
    mov w0, w9
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code with while loop statement with constant true condition")
@given("file")
int main() {
    int i;
    i = 1;
    while (1) {
        i = i + 1;
    }
    return i;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    sub sp, sp, #16
    mov w9, #1
    str w9, [sp, #0]
.L1:
    mov w9, #1
    cbz w9, .L2
    ldr w9, [sp, #0]
    mov w10, #1
    add w11, w9, w10
    str w11, [sp, #0]
    b .L1
.L2:
    ldr w9, [sp, #0]
    mov w0, w9
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code with while loop with empty expression statement")
@given("file")
int main() {
    while (0);
    return 0;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
.L1:
    mov w9, #0
    cbz w9, .L2
    nop
    b .L1
.L2:
    mov w9, #0
    mov w0, w9
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code with while loop with empty compound statement")
@given("file")
int main() {
    while (0) {
    }
    return 0;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
.L1:
    mov w9, #0
    cbz w9, .L2
    nop
    b .L1
.L2:
    mov w9, #0
    mov w0, w9
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code for while loop with float condition")
@given("file")
int main() {
    float n;
    n = 10.0;
    while (n > 5.0) {
        n = n - 1.0;
    }
    return (int)n;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    sub sp, sp, #16
    fmov s8, #10.000000
    str s8, [sp, #0]
.L1:
    ldr s8, [sp, #0]
    fmov s9, #5.000000
    cmp s8, s9
    b.le .L2
    ldr s8, [sp, #0]
    fmov s9, #1.000000
    fsub s10, s8, s9
    str s10, [sp, #0]
    b .L1
.L2:
    ldr s8, [sp, #0]
    fcvtzs w9, s8
    mov w0, w9
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest
