@test("It should generate target arm64 code for if statement with constant false expression")
@given("file")
int main() {
    int i;
    i = 4;
    if (0) {
        i = 50;
    }
    return i;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    sub sp, sp, #16
    mov w9, #4
    str w9, [sp, #0]
    mov w9, #0
    cbz w9, .L1
    mov w9, #50
    str w9, [sp, #0]
.L1:
    ldr w9, [sp, #0]
    mov w0, w9
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code for if statement with constant true expression")
@given("file")
int main() {
    int i;
    i = 4;
    if (1) {
        i = 50;
    }
    return i;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    sub sp, sp, #16
    mov w9, #4
    str w9, [sp, #0]
    mov w9, #1
    cbz w9, .L1
    mov w9, #50
    str w9, [sp, #0]
.L1:
    ldr w9, [sp, #0]
    mov w0, w9
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code for if statement with empty expression statement")
@given("file")
int main() {
    if (0);
    return 0;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    mov w9, #0
    cbz w9, .L1
    nop
.L1:
    mov w9, #0
    mov w0, w9
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code for if statement with empty compound statement")
@given("file")
int main() {
    if (0) {
    }
    return 0;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    mov w9, #0
    cbz w9, .L1
    nop
.L1:
    mov w9, #0
    mov w0, w9
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code for if statement with relational expression <")
@given("file")
int main() {
    int i;
    i = 0;
    if (i < 10) {
        i = i + 1;
    }
    return i;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    sub sp, sp, #16
    mov w9, #0
    str w9, [sp, #0]
    ldr w9, [sp, #0]
    mov w10, #10
    cmp w9, w10
    b.ge .L1
    ldr w9, [sp, #0]
    mov w10, #1
    add w11, w9, w10
    str w11, [sp, #0]
.L1:
    ldr w9, [sp, #0]
    mov w0, w9
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code for if statement with relational expression >")
@given("file")
int main() {
    int i;
    i = 3;
    if (i > 1) {
        i = i - 1;
    }
    return i;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    sub sp, sp, #16
    mov w9, #3
    str w9, [sp, #0]
    ldr w9, [sp, #0]
    mov w10, #1
    cmp w9, w10
    b.le .L1
    ldr w9, [sp, #0]
    mov w10, #1
    sub w11, w9, w10
    str w11, [sp, #0]
.L1:
    ldr w9, [sp, #0]
    mov w0, w9
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code for if statement with equality expression ==")
@given("file")
int main() {
    int i;
    i = 0;
    if (i == 0) {
        i = i + 7;
    }
    return i;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    sub sp, sp, #16
    mov w9, #0
    str w9, [sp, #0]
    ldr w9, [sp, #0]
    mov w10, #0
    cmp w9, w10
    b.ne .L1
    ldr w9, [sp, #0]
    mov w10, #7
    add w11, w9, w10
    str w11, [sp, #0]
.L1:
    ldr w9, [sp, #0]
    mov w0, w9
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code for if statement with equality expression !=")
@given("file")
int main() {
    int i;
    i = 10;
    if (i != 3) {
        i = i - 1;
    }
    return i;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    sub sp, sp, #16
    mov w9, #10
    str w9, [sp, #0]
    ldr w9, [sp, #0]
    mov w10, #3
    cmp w9, w10
    b.eq .L1
    ldr w9, [sp, #0]
    mov w10, #1
    sub w11, w9, w10
    str w11, [sp, #0]
.L1:
    ldr w9, [sp, #0]
    mov w0, w9
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code for if statement with else statement")
@given("file")
int main() {
    int i;
    i = 10;
    if (0) {
        i = i - 1;
    } else {
        i = i * 15;
    }
    return i;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    sub sp, sp, #16
    mov w9, #10
    str w9, [sp, #0]
    mov w9, #0
    cbz w9, .L1
    ldr w9, [sp, #0]
    mov w10, #1
    sub w11, w9, w10
    str w11, [sp, #0]
    b .L2
.L1:
    ldr w9, [sp, #0]
    mov w10, #15
    mul w11, w9, w10
    str w11, [sp, #0]
.L2:
    ldr w9, [sp, #0]
    mov w0, w9
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code for if statement with empty compound statement for else")
@given("file")
int main() {
    int i;
    i = 10;
    if (0) {
        i = i - 1;
    } else {
    }
    return i;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    sub sp, sp, #16
    mov w9, #10
    str w9, [sp, #0]
    mov w9, #0
    cbz w9, .L1
    ldr w9, [sp, #0]
    mov w10, #1
    sub w11, w9, w10
    str w11, [sp, #0]
    b .L2
.L1:
    nop
.L2:
    ldr w9, [sp, #0]
    mov w0, w9
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code for if statement with empty expression statement for else")
@given("file")
int main() {
    int i;
    i = 10;
    if (0) {
        i = i - 1;
    } else
        ;
    return i;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    sub sp, sp, #16
    mov w9, #10
    str w9, [sp, #0]
    mov w9, #0
    cbz w9, .L1
    ldr w9, [sp, #0]
    mov w10, #1
    sub w11, w9, w10
    str w11, [sp, #0]
    b .L2
.L1:
    nop
.L2:
    ldr w9, [sp, #0]
    mov w0, w9
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code if statement with float greater than condition")
@given("file")
int main() {
    float x;
    x = 10;
    if (x > 3.0) {
        x = 777.0;
    }
    return (int)x;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    sub sp, sp, #16
    mov w9, #10
    str w9, [sp, #0]
    ldr s8, [sp, #0]
    fmov s9, #3.000000
    fcmp s8, s9
    b.le .L1
    fmov s8, #777.000000
    str s8, [sp, #0]
.L1:
    ldr s8, [sp, #0]
    fcvtzs w9, s8
    mov w0, w9
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code if statement with float equal to condition")
@given("file")
int main() {
    float x;
    x = 10;
    if (x == 3.0) {
        x = 777.0;
    }
    return (int)x;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    sub sp, sp, #16
    mov w9, #10
    str w9, [sp, #0]
    ldr s8, [sp, #0]
    fmov s9, #3.000000
    fcmp s8, s9
    b.ne .L1
    fmov s8, #777.000000
    str s8, [sp, #0]
.L1:
    ldr s8, [sp, #0]
    fcvtzs w9, s8
    mov w0, w9
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code on equal to condition with float")
@given("file")
int main() {
    float x;
    int y;
    y = x == 3.0;
    return y;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    sub sp, sp, #16
    ldr s8, [sp, #4]
    fmov s9, #3.000000
    fcmp s8, s9
    cset w9, eq
    str w9, [sp, #0]
    ldr w9, [sp, #0]
    mov w0, w9
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code on not equal to condition with float")
@given("file")
int main() {
    float x;
    int y;
    y = x != 3.0;
    return y;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    sub sp, sp, #16
    ldr s8, [sp, #4]
    fmov s9, #3.000000
    fcmp s8, s9
    cset w9, ne
    str w9, [sp, #0]
    ldr w9, [sp, #0]
    mov w0, w9
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest
