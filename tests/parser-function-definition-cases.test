@test("It should parse main function (with basic expression)")
@given("file")
int main() {
    7 * 8;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: {name: 'main', type: 'int'}
|
+-> CompoundStatement
    |
    +-> ExpressionStatement
        |
        +-> MultiplicativeExpression: '*'
            |
            +-> IntegerConstant: '7'
            |
            +-> IntegerConstant: '8'

@endtest

@test("It should parse main function (with two variable declarations x and y)")
@given("file")
int main() {
    int x;
    int y;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: {name: 'main', type: 'int'}
|
+-> CompoundStatement
    |
    +-> VariableDeclaration: {name: 'x', type: 'int'}
    |
    +-> VariableDeclaration: {name: 'y', type: 'int'}

@endtest

@test("It should parse main function with return expression")
@given("file")
int main() {
    return 7;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: {name: 'main', type: 'int'}
|
+-> CompoundStatement
    |
    +-> ReturnStatement
        |
        +-> IntegerConstant: '7'

@endtest

@test("It should parse main function with return (empty expression)")
@given("file")
int main() {
    return;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: {name: 'main', type: 'int'}
|
+-> CompoundStatement
    |
    +-> ReturnStatement

@endtest

@test("It should parse main function with return variable")
@given("file")
int main() {
    int result;
    result = 1;
    return result;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: {name: 'main', type: 'int'}
|
+-> CompoundStatement
    |
    +-> VariableDeclaration: {name: 'result', type: 'int'}
    |
    +-> ExpressionStatement
    |   |
    |   +-> AssignmentExpression: '='
    |       |
    |       +-> Variable: {name: 'result', type: 'int'}
    |       |
    |       +-> IntegerConstant: '1'
    |
    +-> ReturnStatement
        |
        +-> Variable: {name: 'result', type: 'int'}

@endtest
