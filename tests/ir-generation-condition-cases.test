@test("It should generate IR code for if statement with constant false expression")
@given("file")
int main() {
    int i;
    i = 4;
    if (0) {
        i = 50;
    }
    return i;
}
@whenRun("./bin/ir-generator-tester")
@expectOutput("stdout")
0000 OP_FUNC "main"
0001 OP_CONST 4, t1
0002 OP_STORE i, t1
0003 OP_CONST 0, t2
0004 OP_JUMP_IF_FALSE t2, ".L1"
0005 OP_CONST 50, t3
0006 OP_STORE i, t3
0007 OP_LABEL ".L1"
0008 OP_LOAD i, t4
0009 OP_RETURN t4
0010 OP_FUNC_END

@endtest

@test("It should generate IR code for if statement with constant true expression")
@given("file")
int main() {
    int i;
    i = 4;
    if (1) {
        i = 50;
    }
    return i;
}
@whenRun("./bin/ir-generator-tester")
@expectOutput("stdout")
0000 OP_FUNC "main"
0001 OP_CONST 4, t1
0002 OP_STORE i, t1
0003 OP_CONST 1, t2
0004 OP_JUMP_IF_FALSE t2, ".L1"
0005 OP_CONST 50, t3
0006 OP_STORE i, t3
0007 OP_LABEL ".L1"
0008 OP_LOAD i, t4
0009 OP_RETURN t4
0010 OP_FUNC_END

@endtest

@test("It should generate IR code for if statement with empty expression statement")
@given("file")
int main() {
    if (0);
    return 0;
}
@whenRun("./bin/ir-generator-tester")
@expectOutput("stdout")
0000 OP_FUNC "main"
0001 OP_CONST 0, t1
0002 OP_JUMP_IF_FALSE t1, ".L1"
0003 OP_NOP
0004 OP_LABEL ".L1"
0005 OP_CONST 0, t2
0006 OP_RETURN t2
0007 OP_FUNC_END

@endtest

@test("It should generate IR code for if statement with empty compound statement")
@given("file")
int main() {
    if (0) {
    }
    return 0;
}
@whenRun("./bin/ir-generator-tester")
@expectOutput("stdout")
0000 OP_FUNC "main"
0001 OP_CONST 0, t1
0002 OP_JUMP_IF_FALSE t1, ".L1"
0003 OP_NOP
0004 OP_LABEL ".L1"
0005 OP_CONST 0, t2
0006 OP_RETURN t2
0007 OP_FUNC_END

@endtest

@test("It should generate IR code for if statement with relational expression <")
@given("file")
int main() {
    int i;
    i = 0;
    if (i < 10) {
        i = i + 1;
    }
    return i;
}
@whenRun("./bin/ir-generator-tester")
@expectOutput("stdout")
0000 OP_FUNC "main"
0001 OP_CONST 0, t1
0002 OP_STORE i, t1
0003 OP_LOAD i, t2
0004 OP_CONST 10, t3
0005 OP_JUMP_IF_GREATER_OR_EQUAL t2, t3, ".L1"
0006 OP_LOAD i, t4
0007 OP_CONST 1, t5
0008 OP_ADD t4, t5, t6
0009 OP_STORE i, t6
0010 OP_LABEL ".L1"
0011 OP_LOAD i, t7
0012 OP_RETURN t7
0013 OP_FUNC_END

@endtest

@test("It should generate IR code for if statement with relational expression >")
@given("file")
int main() {
    int i;
    i = 3;
    if (i > 1) {
        i = i - 1;
    }
    return i;
}
@whenRun("./bin/ir-generator-tester")
@expectOutput("stdout")
0000 OP_FUNC "main"
0001 OP_CONST 3, t1
0002 OP_STORE i, t1
0003 OP_LOAD i, t2
0004 OP_CONST 1, t3
0005 OP_JUMP_IF_LESS_OR_EQUAL t2, t3, ".L1"
0006 OP_LOAD i, t4
0007 OP_CONST 1, t5
0008 OP_SUB t4, t5, t6
0009 OP_STORE i, t6
0010 OP_LABEL ".L1"
0011 OP_LOAD i, t7
0012 OP_RETURN t7
0013 OP_FUNC_END

@endtest

@test("It should generate IR code for if statement with equality expression ==")
@given("file")
int main() {
    int i;
    i = 0;
    if (i == 0) {
        i = i + 7;
    }
    return i;
}
@whenRun("./bin/ir-generator-tester")
@expectOutput("stdout")
0000 OP_FUNC "main"
0001 OP_CONST 0, t1
0002 OP_STORE i, t1
0003 OP_LOAD i, t2
0004 OP_CONST 0, t3
0005 OP_JUMP_IF_NOT_EQUAL t2, t3, ".L1"
0006 OP_LOAD i, t4
0007 OP_CONST 7, t5
0008 OP_ADD t4, t5, t6
0009 OP_STORE i, t6
0010 OP_LABEL ".L1"
0011 OP_LOAD i, t7
0012 OP_RETURN t7
0013 OP_FUNC_END

@endtest

@test("It should generate IR code for if statement with equality expression !=")
@given("file")
int main() {
    int i;
    i = 10;
    if (i != 3) {
        i = i - 1;
    }
    return i;
}
@whenRun("./bin/ir-generator-tester")
@expectOutput("stdout")
0000 OP_FUNC "main"
0001 OP_CONST 10, t1
0002 OP_STORE i, t1
0003 OP_LOAD i, t2
0004 OP_CONST 3, t3
0005 OP_JUMP_IF_EQUAL t2, t3, ".L1"
0006 OP_LOAD i, t4
0007 OP_CONST 1, t5
0008 OP_SUB t4, t5, t6
0009 OP_STORE i, t6
0010 OP_LABEL ".L1"
0011 OP_LOAD i, t7
0012 OP_RETURN t7
0013 OP_FUNC_END

@endtest

@test("It should generate IR code for if statement with else statement")
@given("file")
int main() {
    int i;
    i = 10;
    if (0) {
        i = i - 1;
    } else {
        i = i * 15;
    }
    return i;
}
@whenRun("./bin/ir-generator-tester")
@expectOutput("stdout")
0000 OP_FUNC "main"
0001 OP_CONST 10, t1
0002 OP_STORE i, t1
0003 OP_CONST 0, t2
0004 OP_JUMP_IF_FALSE t2, ".L1"
0005 OP_LOAD i, t3
0006 OP_CONST 1, t4
0007 OP_SUB t3, t4, t5
0008 OP_STORE i, t5
0009 OP_JUMP ".L2"
0010 OP_LABEL ".L1"
0011 OP_LOAD i, t6
0012 OP_CONST 15, t7
0013 OP_MUL t6, t7, t8
0014 OP_STORE i, t8
0015 OP_LABEL ".L2"
0016 OP_LOAD i, t9
0017 OP_RETURN t9
0018 OP_FUNC_END

@endtest

@test("It should generate IR code for if statement with empty compound statement for else")
@given("file")
int main() {
    int i;
    i = 10;
    if (0) {
        i = i - 1;
    } else {
    }
    return i;
}
@whenRun("./bin/ir-generator-tester")
@expectOutput("stdout")
0000 OP_FUNC "main"
0001 OP_CONST 10, t1
0002 OP_STORE i, t1
0003 OP_CONST 0, t2
0004 OP_JUMP_IF_FALSE t2, ".L1"
0005 OP_LOAD i, t3
0006 OP_CONST 1, t4
0007 OP_SUB t3, t4, t5
0008 OP_STORE i, t5
0009 OP_JUMP ".L2"
0010 OP_LABEL ".L1"
0011 OP_NOP
0012 OP_LABEL ".L2"
0013 OP_LOAD i, t6
0014 OP_RETURN t6
0015 OP_FUNC_END

@endtest

@test("It should generate IR code for if statement with empty expression statement for else")
@given("file")
int main() {
    int i;
    i = 10;
    if (0) {
        i = i - 1;
    } else
        ;
    return i;
}
@whenRun("./bin/ir-generator-tester")
@expectOutput("stdout")
0000 OP_FUNC "main"
0001 OP_CONST 10, t1
0002 OP_STORE i, t1
0003 OP_CONST 0, t2
0004 OP_JUMP_IF_FALSE t2, ".L1"
0005 OP_LOAD i, t3
0006 OP_CONST 1, t4
0007 OP_SUB t3, t4, t5
0008 OP_STORE i, t5
0009 OP_JUMP ".L2"
0010 OP_LABEL ".L1"
0011 OP_NOP
0012 OP_LABEL ".L2"
0013 OP_LOAD i, t6
0014 OP_RETURN t6
0015 OP_FUNC_END

@endtest
