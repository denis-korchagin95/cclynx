@test("A float can be cast to an integer")
@given("file")
int main() {
    float y;
    y = 1.45;
    int x;
    x = (int)y;
    return x;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: 'main' {type: 'int'}
|
+-> CompoundStatement
    |
    +-> VariableDeclaration: 'y' {type: 'float'}
    |
    +-> ExpressionStatement
    |   |
    |   +-> AssignmentExpression: '='
    |       |
    |       +-> Variable: 'y' {type: 'float'}
    |       |
    |       +-> FloatConstant: '1.450000' {type: 'float'}
    |
    +-> VariableDeclaration: 'x' {type: 'int'}
    |
    +-> ExpressionStatement
    |   |
    |   +-> AssignmentExpression: '='
    |       |
    |       +-> Variable: 'x' {type: 'int'}
    |       |
    |       +-> CastExpression {type: 'int'}
    |           |
    |           +-> Variable: 'y' {type: 'float'}
    |
    +-> ReturnStatement
        |
        +-> Variable: 'x' {type: 'int'}

@endtest

@test("An integer can be cast to a float")
@given("file")
float test() {
    int y;
    y = 777;
    float x;
    x = (float)y;
    return x;
}
@whenRun("./bin/parser-tester")
@expectOutput("stdout")
FunctionDefinition: 'test' {type: 'float'}
|
+-> CompoundStatement
    |
    +-> VariableDeclaration: 'y' {type: 'int'}
    |
    +-> ExpressionStatement
    |   |
    |   +-> AssignmentExpression: '='
    |       |
    |       +-> Variable: 'y' {type: 'int'}
    |       |
    |       +-> IntegerConstant: '777' {type: 'int'}
    |
    +-> VariableDeclaration: 'x' {type: 'float'}
    |
    +-> ExpressionStatement
    |   |
    |   +-> AssignmentExpression: '='
    |       |
    |       +-> Variable: 'x' {type: 'float'}
    |       |
    |       +-> CastExpression {type: 'float'}
    |           |
    |           +-> Variable: 'y' {type: 'int'}
    |
    +-> ReturnStatement
        |
        +-> Variable: 'x' {type: 'float'}

@endtest
