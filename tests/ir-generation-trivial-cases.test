@test("It should generate IR code on return integer constant")
@given("file")
int main() {
    return 7;
}
@whenRun("./bin/ir-generator-tester")
@expectOutput("stdout")
0000 OP_FUNC "main"
0001 OP_CONST 7, t1
0002 OP_RETURN t1
0003 OP_FUNC_END

@endtest

@test("It should generate IR code on return trivial expression (without variables +, *)")
@given("file")
int main() {
    return 2 * 3 + 1;
}
@whenRun("./bin/ir-generator-tester")
@expectOutput("stdout")
0000 OP_FUNC "main"
0001 OP_CONST 2, t1
0002 OP_CONST 3, t2
0003 OP_MUL t1, t2, t3
0004 OP_CONST 1, t4
0005 OP_ADD t3, t4, t5
0006 OP_RETURN t5
0007 OP_FUNC_END

@endtest

@test("It should generate IR code on return trivial expression with nested sub-expressions")
@given("file")
int main() {
    return 2 * ((3 * 4 + 20) + 1) * 15;
}
@whenRun("./bin/ir-generator-tester")
@expectOutput("stdout")
0000 OP_FUNC "main"
0001 OP_CONST 2, t1
0002 OP_CONST 3, t2
0003 OP_CONST 4, t3
0004 OP_MUL t2, t3, t4
0005 OP_CONST 20, t5
0006 OP_ADD t4, t5, t6
0007 OP_CONST 1, t7
0008 OP_ADD t6, t7, t8
0009 OP_MUL t1, t8, t9
0010 OP_CONST 15, t10
0011 OP_MUL t9, t10, t11
0012 OP_RETURN t11
0013 OP_FUNC_END

@endtest

@test("It should generate IR code on return trivial expression (without variables, -, /)")
@given("file")
int main() {
    return 12 / 3 - 1;
}
@whenRun("./bin/ir-generator-tester")
@expectOutput("stdout")
0000 OP_FUNC "main"
0001 OP_CONST 12, t1
0002 OP_CONST 3, t2
0003 OP_DIV t1, t2, t3
0004 OP_CONST 1, t4
0005 OP_SUB t3, t4, t5
0006 OP_RETURN t5
0007 OP_FUNC_END

@endtest

@test("It should generate IR code on return trivial expression (without variables, >)")
@given("file")
int main() {
    return 12 > 3;
}
@whenRun("./bin/ir-generator-tester")
@expectOutput("stdout")
0000 OP_FUNC "main"
0001 OP_CONST 12, t1
0002 OP_CONST 3, t2
0003 OP_IS_GREATER_THAN t1, t2, t3
0004 OP_RETURN t3
0005 OP_FUNC_END

@endtest

@test("It should generate IR code on return trivial expression (without variables, <)")
@given("file")
int main() {
    return 12 < 3;
}
@whenRun("./bin/ir-generator-tester")
@expectOutput("stdout")
0000 OP_FUNC "main"
0001 OP_CONST 12, t1
0002 OP_CONST 3, t2
0003 OP_IS_LESS_THAN t1, t2, t3
0004 OP_RETURN t3
0005 OP_FUNC_END

@endtest

@test("It should generate IR code on return trivial expression (without variables, ==)")
@given("file")
int main() {
    return 12 == 3;
}
@whenRun("./bin/ir-generator-tester")
@expectOutput("stdout")
0000 OP_FUNC "main"
0001 OP_CONST 12, t1
0002 OP_CONST 3, t2
0003 OP_IS_EQUAL t1, t2, t3
0004 OP_RETURN t3
0005 OP_FUNC_END

@endtest

@test("It should generate IR code on return trivial expression (without variables, !=)")
@given("file")
int main() {
    return 12 != 3;
}
@whenRun("./bin/ir-generator-tester")
@expectOutput("stdout")
0000 OP_FUNC "main"
0001 OP_CONST 12, t1
0002 OP_CONST 3, t2
0003 OP_IS_NOT_EQUAL t1, t2, t3
0004 OP_RETURN t3
0005 OP_FUNC_END

@endtest
