@test("It should generate target arm64 code on return integer constant")
@given("file")
int main() {
    return 7;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    mov w9, #7
    mov w0, w9
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code on return a casted float constant")
@given("file")
int main() {
    return (int)4.65;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    fmov s8, #4.650000
    fcvtzs w9, s8
    mov w0, w9
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code on return trivial expression (without variables +, *)")
@given("file")
int main() {
    return 2 * 3 + 1;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    mov w9, #2
    mov w10, #3
    mul w11, w9, w10
    mov w9, #1
    add w10, w11, w9
    mov w0, w10
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code on return trivial expression (without variables, -, /)")
@given("file")
int main() {
    return 12 / 3 - 1;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    mov w9, #12
    mov w10, #3
    sdiv w11, w9, w10
    mov w9, #1
    sub w10, w11, w9
    mov w0, w10
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code on return trivial expression with nested sub-expressions")
@given("file")
int main() {
    return 2 * ((3 * 4 + 20) + 1) * 15;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    mov w9, #2
    mov w10, #3
    mov w11, #4
    mul w12, w10, w11
    mov w10, #20
    add w11, w12, w10
    mov w10, #1
    add w12, w11, w10
    mul w10, w9, w12
    mov w9, #15
    mul w11, w10, w9
    mov w0, w11
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code on return trivial expression (without variables, >)")
@given("file")
int main() {
    return 12 > 3;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    mov w9, #12
    mov w10, #3
    cmp w9, w10
    cset w11, gt
    mov w0, w11
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code on return trivial expression (without variables, <)")
@given("file")
int main() {
    return 12 < 3;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    mov w9, #12
    mov w10, #3
    cmp w9, w10
    cset w11, lt
    mov w0, w11
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code on return trivial expression (without variables, ==)")
@given("file")
int main() {
    return 12 == 3;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    mov w9, #12
    mov w10, #3
    cmp w9, w10
    cset w11, eq
    mov w0, w11
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code on return trivial expression (without variables, !=)")
@given("file")
int main() {
    return 12 != 3;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_main:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    mov w9, #12
    mov w10, #3
    cmp w9, w10
    cset w11, ne
    mov w0, w11
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest

@test("It should generate target arm64 code on returning float constant from function")
@given("file")
float test() {
    float a;
    a = 4.65;
    return a;
}
@whenRun("./bin/target-code-generator-tester")
@expectOutput("stdout")
.text
.global _main
.align 2

_test:
    stp x29, x30, [sp, -16]!
    mov x29, sp
    sub sp, sp, #16
    fmov s8, #4.650000
    str s8, [sp, #0]
    ldr s8, [sp, #0]
    mov s0, s8
    add sp, sp, #16
    ldp x29, x30, [sp], #16
    ret

@endtest
